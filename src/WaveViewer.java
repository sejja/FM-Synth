//
//	WaveViewerSampler.java
//	Synthesizer
//
//	Created by Diego Revilla on 24/04/23
//	Copyright Â© 2023 Deusto. All Rights reserved
//

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;

public class WaveViewer extends JPanel {
	private static final long serialVersionUID = -3467698279354096333L;
	private Oscillator[] mOscillators;
	
	// ------------------------------------------------------------------------
	/*! Wave Viewer
	*
	*   Constructs a Wave Viewer from an array of generative oscillators
	*/ // ---------------------------------------------------------------------
	public WaveViewer(Oscillator[] oscillator) {
		mOscillators = oscillator;
		setBorder(Utils.WindowDesign.GetSynthesizerBorder());
	}
	
	// ------------------------------------------------------------------------
	/*! Paint Component
	*
	*   Paints the component, showing the wave form generated by the Oscillators
	*/ // ---------------------------------------------------------------------
	@Override
	public void paintComponent(Graphics graphics) {
		super.paintComponent(graphics);
		
		final int PAD = 25;
		final Graphics2D graphics2D = (Graphics2D)graphics;
		final int sampleBufferSize = getWidth() - PAD * 2;
		final double[] mizedSamples = new double[sampleBufferSize];
		final int midY = getHeight()/2;
		final int origin = Utils.WindowDesign.SampleToYCoordinates(0, this, PAD);

		Arrays.stream(mOscillators).forEach(oscillator -> {
			double[] samples = oscillator.GetSampleWaveForm(sampleBufferSize);
			
			//Assign every mixed sample to a nth time less of the generated values
			for(int i = 0; i < samples.length; i++)
				mizedSamples[i] += samples[i] / mOscillators.length;
		});
		
		graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		graphics2D.drawLine(PAD, midY, getWidth() - PAD, midY);
		graphics2D.drawLine(PAD, PAD, PAD, getHeight() - PAD);
		graphics2D.setColor(Color.GREEN);
		
		//Plot every single line (It would be great if we could do it async and with a forEach)
		for(int i = 0; i < sampleBufferSize; i++)
			graphics2D.drawLine(PAD + i, Utils.WindowDesign.SampleToYCoordinates(mizedSamples[i], this, PAD), PAD + i + 1, origin);
	}
}
